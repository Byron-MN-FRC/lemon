// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4859.lemon.subsystems;


import org.usfirst.frc4859.lemon.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Joystick;
/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private PWMVictorSPX leftMaster;
    private PWMVictorSPX leftfollower;
    private SpeedControllerGroup speedControllerGroupLeft;
    private PWMVictorSPX rightMaster;
    private PWMVictorSPX rightfollower;
    private SpeedControllerGroup speedControllerGroupRight;
    private DifferentialDrive tankDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double y = 0;
	private double twist = 0;

    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftMaster = new PWMVictorSPX(0);
        addChild("leftMaster",leftMaster);
        leftMaster.setInverted(false);
        
        leftfollower = new PWMVictorSPX(1);
        addChild("leftfollower",leftfollower);
        leftfollower.setInverted(false);
        
        speedControllerGroupLeft = new SpeedControllerGroup(leftMaster, leftfollower  );
        addChild("SpeedControllerGroupLeft",speedControllerGroupLeft);
        
        
        rightMaster = new PWMVictorSPX(2);
        addChild("rightMaster",rightMaster);
        rightMaster.setInverted(false);
        
        rightfollower = new PWMVictorSPX(3);
        addChild("rightfollower",rightfollower);
        rightfollower.setInverted(false);
        
        speedControllerGroupRight = new SpeedControllerGroup(rightMaster, rightfollower  );
        addChild("SpeedControllerGroupRight",speedControllerGroupRight);
        
        
        tankDrive = new DifferentialDrive(speedControllerGroupLeft, speedControllerGroupRight);
        addChild("tankDrive",tankDrive);
        tankDrive.setSafetyEnabled(true);
        tankDrive.setExpiration(0.1);
        tankDrive.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoyStick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    double limitedJoystick = 0;

    public void driveWithJoystick(Joystick joystickP0) {
		y = -joystickP0.getY();
        twist = joystickP0.getTwist();
        double change = y - limitedJoystick; 
        if (change > 0.01) {change = 0.01;}
        else if (change < -0.01) {change = -0.01;}
        limitedJoystick += change;
        tankDrive.arcadeDrive(limitedJoystick, twist);
    }
    // private void motorConfig() {
	// 	// Set followers
	// 	leftfollower.set(ControlMode.Follower, RobotMap.talonIDLeftMaster);
    // 	rightfollower.set(ControlMode.Follower, RobotMap.talonIDRightMaster);
    
}

